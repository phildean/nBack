# Constants
int BLOCK_COUNT = 40;
int stimulus_count = 15;
int number_repetitions = 10;
int number_block_type = 4;

# Experimental Order
array<int> experiment[40] = {
0,
1,
3,
4,
1,
4,
3,
3,
0,
3,
1,
0,
4,
4,
0,
3,
1,
1,
0,
4,
3,
3,
4,
0,
0,
1,
3,
3,
0,
4,
3,
1,
1,
4,
4,
0,
0,
1,
4,
1
};

# Variable
int num_correct;

#To start experiment with first MRI pulse
loop until (pulse_manager.main_pulse_count() == 1)
   begin
   end;

# Make sure n-Back only occurs on target condition
sub
	int random_exclude( int first, int last, int exclude )
begin
	int rval = random( first, last - 1 );
	if (rval >= exclude) then
		rval = rval + 1
	end;
	return rval
end;

############   Subroutines for presentation ###########

# Rest

sub
	Rest_Block
begin
	
   RestBlock.present();
	
	int current_mri_pulse = pulse_manager.main_pulse_count();
	int end_mri_pulse = current_mri_pulse+1;
	
	loop until (pulse_manager.main_pulse_count() >= end_mri_pulse) begin
	end;
	
   RestBlock_Trial.present();


end;

# 0-back
sub 
	n_back_0_Block
begin
	
	array<int> is_target_0[stimulus_count];
	loop int i = 1 until i > stimulus_count / 3 begin
		is_target_0[i] = 1;
		i = i + 1
	end;
	
		is_target_0.shuffle();
		is_target_0.shuffle();
	loop until is_target_0[1] == 0 begin
		is_target_0.shuffle();
		is_target_0.shuffle()
	end;
	
	num_correct = 0;
		
	int chosen_number = random (1, 9);
	int stored_number = chosen_number;
	
	BeginBlock0_Back_Second.set_caption(string(stored_number));
	BeginBlock0_Back_Second.redraw();
	
	Block0.present();
		
	int current_mri_pulse = pulse_manager.main_pulse_count();
	int end_mri_pulse = current_mri_pulse+1;

	loop until (pulse_manager.main_pulse_count() == end_mri_pulse) begin
   end;	
	
	n_back_0_MRI_Pulse.present();
	
	loop
		int i = 1;
		int last = 0;
	until
		i > stimulus_count
	begin
		int index;
		string target_string = ",No";
		if (is_target_0[i] == 1) then
			index = stored_number;
			target_string = ",Yes";
			n_back_0_pic_target.set_part( 1, numbers[index] );
			n_back_0_event_target.set_event_code ( " T 20," + numbers[index].description() + target_string );
			n_back_0_trial_target.present();
		else
			index = random_exclude( 1, numbers.count(), stored_number );
			n_back_0_pic_normal.set_part( 1, numbers[index] );
			n_back_0_event_normal.set_event_code ( " T 10," + numbers[index].description() + target_string );
			n_back_0_trial_normal.present();
		end;
		
		last = index;
		
		# Count up correct and incorrect
		
		int type = stimulus_manager.last_stimulus_data().type();		
		if (type == stimulus_hit) then
				num_correct = num_correct + 1
		end;
		
		i = i + 1
	end;
	# store the percent correct in the text
	PercentCorrect.set_caption(string(((num_correct) * 100) / stimulus_count));
	PercentCorrect.redraw();

end;

# 2-back
sub 
	n_back_2_Block
begin

	array<int> is_target_2[stimulus_count];
	loop int i = 1 until i > stimulus_count / 3 begin
		is_target_2[i] = 1;
		i = i + 1
	end;
		is_target_2.shuffle();
		is_target_2.shuffle();
	loop until is_target_2[1] == 0 && is_target_2[2] == 0 begin
		is_target_2.shuffle();
		is_target_2.shuffle()
	end;

	num_correct = 0;

	Block2.present();
	
	int current_mri_pulse = pulse_manager.main_pulse_count();
	int end_mri_pulse = current_mri_pulse+1;

	loop until (pulse_manager.main_pulse_count() == end_mri_pulse) begin
   end;	
	
	n_back_2_MRI_Pulse.present();
	
	loop
		int i = 1;
		int last = 0;
		int two_back = 0;
	until
		i > stimulus_count
	begin
		int index;
		string target_string = ",No";
		if (is_target_2[i] == 1) then
			index = two_back;
			target_string = ",Yes";
			n_back_2_pic_target.set_part( 1, numbers[index] );
			n_back_2_event_target.set_event_code ( " T 22," + numbers[index].description() + target_string );
			n_back_2_trial_target.present();
		else
			index = random_exclude( 1, numbers.count(), two_back );
			n_back_2_pic_normal.set_part( 1, numbers[index] );
			n_back_2_event_normal.set_event_code ( " T 12," + numbers[index].description() + target_string );
			n_back_2_trial_normal.present();
		end;
		
		two_back = last;
		last = index;
		
		# Count up correct and incorrect
		
		int type = stimulus_manager.last_stimulus_data().type();		
		if (type == stimulus_hit) then
				num_correct = num_correct + 1
		end;
		
		i = i + 1
	end;
	
	# store the percent correct in the text
	PercentCorrect.set_caption(string(((num_correct) * 100) / stimulus_count));
	PercentCorrect.redraw();

end;

# 4-back
sub
 	n_back_4_Block
begin

	array<int> is_target_4[stimulus_count];
	loop int i = 1 until i > stimulus_count / 3 begin
		is_target_4[i] = 1;
		i = i + 1
	end;
		is_target_4.shuffle();
		is_target_4.shuffle();
	loop until is_target_4[1] == 0 && is_target_4[2] == 0 && is_target_4[3] == 0 && is_target_4[4] == 0 begin
		is_target_4.shuffle();
		is_target_4.shuffle()
	end;

	num_correct = 0;
	
	Block4.present();
	
	int current_mri_pulse = pulse_manager.main_pulse_count();
	int end_mri_pulse = current_mri_pulse+1;

	loop until (pulse_manager.main_pulse_count() == end_mri_pulse) begin
   end;	

	n_back_2_MRI_Pulse.present();

	loop
		int i = 1;
		int last = 0;
		int two_back = 0;
		int three_back = 0;
		int four_back = 0;
	until
		i > stimulus_count
	begin
		int index;
		string target_string = ",No";
		if (is_target_4[i] == 1) then
			index = four_back;
			target_string = ",Yes";
			n_back_4_pic_target.set_part( 1, numbers[index] );
			n_back_4_event_target.set_event_code ( " T 24," + numbers[index].description() + target_string );
			n_back_4_trial_target.present();
		else
			index = random_exclude( 1, numbers.count(), three_back );
			n_back_4_pic_normal.set_part( 1, numbers[index] );
			n_back_4_event_normal.set_event_code ( " T 14," + numbers[index].description() + target_string );
			n_back_4_trial_normal.present();
		end;
		
		four_back = three_back;
		three_back = two_back;
		two_back = last;
		last = index;
		
		# Count up correct and incorrect
		
		int type = stimulus_manager.last_stimulus_data().type();		
		if (type == stimulus_hit) then
				num_correct = num_correct + 1
		end;
		
		i = i + 1
	end;
	
	# store the percent correct in the text
	PercentCorrect.set_caption(string(((num_correct) * 100) / stimulus_count));
	PercentCorrect.redraw();

end;

########################################################################################

# Explanation Screen
#loop until (pulse_manager.main_pulse_count() == 3)
#   begin
	Intro1.present();
#   end;
#loop until (pulse_manager.main_pulse_count() == 5)
#   begin
	Intro2.present();
#   end;

##################### Presenting Experiments ######################

loop
	int block_num = 1;
until
	block_num > experiment.count()
begin
	if experiment[block_num] == 0 then
	
		Rest_Block();

	# store the block number in the text

		BlockNumber.set_caption(string(block_num));
		BlockNumber.redraw();

	# show the end of block trial

	#int current_mri_pulse = pulse_manager.main_pulse_count();
	#int end_mri_pulse = current_mri_pulse+2;

	#loop until (pulse_manager.main_pulse_count() == end_mri_pulse) begin
         EndTrial_Rest.present();
   #end;	
		
	elseif experiment[block_num] == 1 then
	
		n_back_0_Block();
	
	
	# store the block number in the text

		BlockNumber.set_caption(string(block_num));
		BlockNumber.redraw();

	# show the end of block trial

	#int current_mri_pulse = pulse_manager.main_pulse_count();
	#int end_mri_pulse = current_mri_pulse+2;

	#loop until (pulse_manager.main_pulse_count() == end_mri_pulse) begin
         EndTrial_0Back.present();
   #end;

	
	elseif experiment[block_num] == 3 then
	
		n_back_2_Block();
	
	
	# store the block number in the text

		BlockNumber.set_caption(string(block_num));
		BlockNumber.redraw();

	# show the end of block trial

	#int current_mri_pulse = pulse_manager.main_pulse_count();
	#int end_mri_pulse = current_mri_pulse+2;

	#loop until (pulse_manager.main_pulse_count() == end_mri_pulse) begin
         EndTrial_2Back.present();
   #end;

	
	elseif experiment[block_num] == 4 then
	
		n_back_4_Block();
	

	# store the block number in the text

		BlockNumber.set_caption(string(block_num));
		BlockNumber.redraw();

	# show the end of block trial

	#int current_mri_pulse = pulse_manager.main_pulse_count();
	#int end_mri_pulse = current_mri_pulse+2;

	#loop until (pulse_manager.main_pulse_count() == end_mri_pulse) begin
         EndTrial_4Back.present();
   #end;
	
	end;
	
block_num = block_num + 1;

end;
